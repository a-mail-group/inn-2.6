.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "STORAGE.CONF 5"
.TH STORAGE.CONF 5 "2018-01-28" "INN 2.6.3" "InterNetNews Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
storage.conf \- Configuration file for storage manager
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The file \fIpathetc\fR/storage.conf contains the rules to be used in
assigning articles to different storage methods.  These rules determine
where incoming articles will be stored.
.PP
The storage manager is a unified interface between \s-1INN\s0 and a variety of
different storage methods, allowing the news administrator to choose
between different storage methods with different trade-offs (or even
use several at the same time for different newsgroups, or articles of
different sizes).  The rest of \s-1INN\s0 need not care what type of storage
method was used for a given article; the storage manager will figure
this out automatically when that article is retrieved via the storage
\&\s-1API. \s0 Note that you may also want to see the options provided in
\&\fIinn.conf\fR\|(5) regarding article storage.
.PP
The \fIstorage.conf\fR file consists of a series of storage method entries.
Blank lines and lines beginning with a number sign (\f(CW\*(C`#\*(C'\fR) are ignored.
The maximum number of characters in each line is 255.  The order of
entries in this file is important, see below.
.PP
Each entry specifies a storage method and a set of rules.  Articles which
match all of the rules of a storage method entry will be stored using
that storage method; if an article matches multiple storage method
entries, the first one will be used.  Each entry is formatted as follows:
.PP
.Vb 8
\&    method <methodname> {
\&        class: <storage_class>
\&        newsgroups: <wildmat>
\&        size: <minsize>[,<maxsize>]
\&        expires: <mintime>[,<maxtime>]
\&        options: <options>
\&        exactmatch: <bool>
\&    }
.Ve
.PP
If spaces or tabs are included in a value, that value must be enclosed in
double quotes ("").  If either a number sign (\f(CW\*(C`#\*(C'\fR) or a double quote
are meant to be included verbatim in a value, they should be escaped
with \f(CW\*(C`\e\*(C'\fR.
.PP
<methodname> is the name of a storage method to use for articles which
match the rules of this entry.  The currently available storage methods
are:
.PP
.Vb 5
\&    cnfs
\&    timecaf
\&    timehash
\&    tradspool
\&    trash
.Ve
.PP
See the \*(L"\s-1STORAGE METHODS\*(R"\s0 section below for more details.
.PP
The meanings of the keys in each storage method entry are as follows:
.IP "\fIclass\fR: <storage_class>" 4
.IX Item "class: <storage_class>"
An identifier for this storage method entry.  <storage_class> should be
a number between 0 and 255.  It should be unique across all of the entries in
this file.  It is mainly used for specifying expiration times by storage class
as described in \fIexpire.ctl\fR\|(5); \f(CW\*(C`timehash\*(C'\fR and \f(CW\*(C`timecaf\*(C'\fR will also set the
top-level directory in which articles accepted by this storage class are stored.
The assignment of a particular number to a storage class is arbitrary but
permanent (since it is used in storage tokens).  Storage classes can be
for instance numbered sequentially in \fIstorage.conf\fR.
.IP "\fInewsgroups\fR: <wildmat>" 4
.IX Item "newsgroups: <wildmat>"
What newsgroups are stored using this storage method.  <wildmat> is a \fIuwildmat\fR\|(3)
pattern which is matched against the newsgroups an article is posted to.
If \fIstoreonxref\fR in \fIinn.conf\fR is true, this pattern will be matched against
the newsgroup names in the Xref: header; otherwise, it will be matched against
the newsgroup names in the Newsgroups: header (see \fIinn.conf\fR\|(5) for discussion
of the differences between these possibilities).  Poison wildmat expressions
(expressions starting with \f(CW\*(C`@\*(C'\fR) are allowed and can be used to exclude certain
group patterns:  articles crossposted to poisoned newsgroups will not be stored
using this storage method.  The <wildmat> pattern is matched in order.
.Sp
There is no default newsgroups pattern; if an entry should match all
newsgroups, use an explicit \f(CW\*(C`newsgroups: *\*(C'\fR.
.IP "\fIsize\fR: <minsize>[,<maxsize>]" 4
.IX Item "size: <minsize>[,<maxsize>]"
A range of article sizes (in bytes) which should be stored using this storage
method.  If <maxsize> is \f(CW0\fR or not given, the upper size of articles is
limited only by \fImaxartsize\fR in \fIinn.conf\fR.  The size: field is optional
and may be omitted entirely if you want articles of any size to be stored
in this storage method (if, of course, these articles fulfill all the other
requirements of this storage method entry).  By default, <minsize> is set
to \f(CW0\fR.
.IP "\fIexpires\fR: <mintime>[,<maxtime>]" 4
.IX Item "expires: <mintime>[,<maxtime>]"
A range of article expiration times which should be stored using this storage
method.  Be careful; this is less useful than it may appear at first.  This
is based \fBonly\fR on the Expires: header of the article, not on any local
expiration policies or anything in \fIexpire.ctl\fR!  If <mintime> is non-zero,
then this entry \fBwill not match\fR any article without an Expires: header.
This key is therefore only really useful for assigning articles with requested
longer expire times to a separate storage method.  Articles only match if the
time until expiration (that is to say, the amount of time into the future
that the Expires: header of the article requests that it remain around) falls
in the interval specified by <mintime> and <maxtime>.
.Sp
The format of these parameters is \f(CW\*(C`0d0h0m0s\*(C'\fR (days, hours, minutes, and seconds
into the future).  If <maxtime> is \f(CW\*(C`0s\*(C'\fR or is not specified, there is no upper
bound on expire times falling into this entry (note that this key has no effect
on when the article will actually be expired, but only on whether or not the
article will be stored using this storage method).  This field is also optional
and may be omitted entirely if you do not want to store articles according
to their Expires: header, if any.
.Sp
A <mintime> value greater than \f(CW\*(C`0s\*(C'\fR implies that this storage method won't
match any article without an Expires: header.
.IP "\fIoptions\fR: <options>" 4
.IX Item "options: <options>"
This key is for passing special options to storage methods that require them
(currently only \f(CW\*(C`cnfs\*(C'\fR).  See the \*(L"\s-1STORAGE METHODS\*(R"\s0 section below for
a description of its use.
.IP "\fIexactmatch\fR: <bool>" 4
.IX Item "exactmatch: <bool>"
If this key is set to true, all the newsgroups in the Newsgroups: header of
incoming articles will be examined to see if they match newsgroups patterns.
(Normally, any non-zero number of matching newsgroups is sufficient, provided
no newsgroup matches a poison wildmat as described above.)  This is a boolean
value; \f(CW\*(C`true\*(C'\fR, \f(CW\*(C`yes\*(C'\fR and \f(CW\*(C`on\*(C'\fR are usable to enable this key.  The case of
these values is not significant.  The default is false.
.PP
If an article matches all of the constraints of an entry, it is stored
via that storage method and is associated with that <storage_class>.
This file is scanned in order and the first matching entry is used to store
the article.
.PP
If an article does not match any entry, either by being posted to a newsgroup
which does not match any of the <wildmat> patterns or by being outside
the size and expires ranges of all entries whose newsgroups pattern
it does match, the article is not stored and is rejected by \fBinnd\fR.
When this happens, the error message:
.PP
.Vb 1
\&    cant store article: no matching entry in storage.conf
.Ve
.PP
is logged to syslog.  If you want to silently drop articles matching certain
newsgroup patterns or size or expires ranges, assign them to the \f(CW\*(C`trash\*(C'\fR
storage method rather than having them not match any storage method entry.
.SH "STORAGE METHODS"
.IX Header "STORAGE METHODS"
Currently, there are five storage methods available.  Each method has its
pros and cons; you can choose any mixture of them as is suitable for
your environment.  Note that each method has an attribute \s-1EXPENSIVESTAT\s0
which indicates whether checking the existence of an article is expensive
or not.  This is used to run \fIexpireover\fR\|(8).
.IP "\fBcnfs\fR" 4
.IX Item "cnfs"
The \f(CW\*(C`cnfs\*(C'\fR storage method stores articles in large cyclic buffers (\s-1CNFS\s0
stands for Cyclic News File System).  Articles are stored in \s-1CNFS\s0 buffers
in arrival order, and when the buffer fills, it wraps around to the beginning
and stores new articles over the top of the oldest articles in the buffer. The
expire time of articles stored in \s-1CNFS\s0 buffers is therefore entirely
determined by how long it takes the buffer to wrap around, which depends
on how quickly data is being stored in it.  (This method is therefore said
to have self-expire functionality.  It also means that when an article is
cancelled, the cycbuff doesn't go back and use space until it rolls over and
the whole cycbuff starts being reused.)  \s-1EXPENSIVESTAT\s0 is false for this
method.
.Sp
\&\s-1CNFS\s0 has its own configuration file, \fIcycbuff.conf\fR, which describes some
subtleties to the basic description given above.  Storage method entries
for the \f(CW\*(C`cnfs\*(C'\fR storage method must have an options: field specifying
the metacycbuff into which articles matching that entry should be stored;
see \fIcycbuff.conf\fR\|(5) for details on metacycbuffs.
.Sp
Advantages:  By far the fastest of all storage methods (except for \f(CW\*(C`trash\*(C'\fR),
since it eliminates the overhead of dealing with a file system and creating
new files.  Unlike all other storage methods, it does not require manual
article expiration.  With \s-1CNFS,\s0 the server will never throttle itself
due to a full spool disk, and groups are restricted to just the buffer
files given so that they can never use more than the amount of disk space
allocated to them.
.Sp
Disadvantages:  Article retention times are more difficult to control
because old articles are overwritten automatically.  Attacks on Usenet,
such as flooding or massive amounts of spam, can result in wanted articles
expiring much faster than intended (with no warning).
.IP "\fBtimecaf\fR" 4
.IX Item "timecaf"
This method stores multiple articles in one file, whose name is based on
the article's arrival time and the storage class.  The file name will be:
.Sp
.Vb 1
\&    <patharticles>/timecaf\-nn/bb/aacc.CF
.Ve
.Sp
where \f(CW\*(C`nn\*(C'\fR is the hexadecimal value of <storage_class>, \f(CW\*(C`bb\*(C'\fR and \f(CW\*(C`aacc\*(C'\fR
are the hexadecimal components of the arrival time, and \f(CW\*(C`CF\*(C'\fR is a
hardcoded extension.  (The arrival time, in seconds since the epoch,
is converted to hexadecimal and interpreted as \f(CW0xaabbccdd\fR, with
\&\f(CW\*(C`aa\*(C'\fR, \f(CW\*(C`bb\*(C'\fR, and \f(CW\*(C`cc\*(C'\fR used to build the path.)  This method does not
have self-expire functionality (meaning \fBexpire\fR has to run periodically
to delete old articles, as well as cancelled articles if \fIimmediatecancel\fR
is not set to true in \fIinn.conf\fR).  \s-1EXPENSIVESTAT\s0 is false for this method.
.Sp
Advantages:  It is roughly four times faster than \f(CW\*(C`timehash\*(C'\fR for article
writes, since much of the file system overhead is bypassed, while still
retaining the same fine control over article retention time.
.Sp
Disadvantages:  Using this method means giving up all but the most careful
manually fiddling with the article spool; in this aspect, it looks like
\&\f(CW\*(C`cnfs\*(C'\fR.  As one of the newer and least widely used storage types,
\&\f(CW\*(C`timecaf\*(C'\fR has not been as thoroughly tested as the other methods.
.IP "\fBtimehash\fR" 4
.IX Item "timehash"
This method is very similar to \f(CW\*(C`timecaf\*(C'\fR except that each article is
stored in a separate file.  The name of the file for a given article
will be:
.Sp
.Vb 1
\&    <patharticles>/time\-nn/bb/cc/yyyy\-aadd
.Ve
.Sp
where \f(CW\*(C`nn\*(C'\fR is the hexadecimal value of <storage_class>, \f(CW\*(C`yyyy\*(C'\fR is a
hexadecimal sequence number, and \f(CW\*(C`bb\*(C'\fR, \f(CW\*(C`cc\*(C'\fR, and \f(CW\*(C`aadd\*(C'\fR are components
of the arrival time in hexadecimal (the arrival time is interpreted as
documented above under \f(CW\*(C`timecaf\*(C'\fR).  This method does not have self-expire
functionality.  Cancelled articles are removed immediately.  \s-1EXPENSIVESTAT\s0
is true for this method.
.Sp
Advantages:  Heavy traffic groups do not cause bottlenecks, and a fine control
of article retention time is still possible.
.Sp
Disadvantages:  The ability to easily find all articles in a given newsgroup
and manually fiddle with the article spool is lost, and \s-1INN\s0 still suffers
from speed degradation due to file system overhead (creating and deleting
individual files is a slow operation).
.IP "\fBtradspool\fR" 4
.IX Item "tradspool"
Traditional spool, or \f(CW\*(C`tradspool\*(C'\fR, is the traditional news article storage
format.  Each article is stored in an individual text file named:
.Sp
.Vb 1
\&    <patharticles>/news/group/name/nnnnn
.Ve
.Sp
where \f(CW\*(C`news/group/name\*(C'\fR is the name of the newsgroup to which the article
was posted with each period changed to a slash, and \f(CW\*(C`nnnnn\*(C'\fR is the
sequence number of the article in that newsgroup.  For crossposted articles,
the article is linked into each newsgroup to which it is crossposted
(using either hard or symbolic links).  This is the way versions of \s-1INN\s0
prior to 2.0 stored all articles, as well as being the article storage format
used by C News and earlier news systems.  This method does not have
self-expire functionality.  Cancelled articles are removed immediately.
\&\s-1EXPENSIVESTAT\s0 is true for this method.
.Sp
Advantages:  It is widely used and well-understood; it can read article
spools written by older versions of \s-1INN\s0 and it is compatible with all
third-party \s-1INN\s0 add-ons.  This storage mechanism provides easy and direct
access to the articles stored on the server and makes writing programs
that fiddle with the news spool very easy, and gives fine control over
article retention times.
.Sp
Disadvantages:  It takes a very fast file system and I/O system to keep up with
current Usenet traffic volumes due to file system overhead.  Groups with heavy
traffic tend to create a bottleneck because of inefficiencies in storing large
numbers of article files in a single directory.  It requires a nightly expire
program to delete old articles out of the news spool, a process that can slow
down the server for several hours or more.
.IP "\fBtrash\fR" 4
.IX Item "trash"
This method silently discards all articles stored in it.  Its only real
uses are for testing and for silently discarding articles matching a
particular storage method entry (for whatever reason).  Articles stored
in this method take up no disk space and can never be retrieved, so this
method has self-expire functionality of a sort.  \s-1EXPENSIVESTAT\s0 is false
for this method.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
The following sample \fIstorage.conf\fR file would store all articles
posted to alt.binaries.* in the \f(CW\*(C`BINARIES\*(C'\fR \s-1CNFS\s0 metacycbuff,
all articles over roughly 50\ \s-1KB\s0 in any other hierarchy in the \f(CW\*(C`LARGE\*(C'\fR \s-1CNFS\s0
metacycbuff, all other articles in alt.* in one timehash class, and all
other articles in any newsgroups in a second timehash class, except for
the internal.* hierarchy which is stored in traditional spool format.
.PP
.Vb 10
\&    method tradspool {
\&        class: 1
\&        newsgroups: internal.*
\&    }
\&    method cnfs {
\&        class: 2
\&        newsgroups: alt.binaries.*
\&        options: BINARIES
\&    }
\&    method cnfs {
\&        class: 3
\&        newsgroups: *
\&        size: 50000
\&        options: LARGE
\&    }
\&    method timehash {
\&        class: 4
\&        newsgroups: alt.*
\&    }
\&    method timehash {
\&        class: 5
\&        newsgroups: *
\&    }
.Ve
.PP
Notice that the last storage method entry will catch everything.  This is
a good habit to get into; make sure that you have at least one catch-all
entry just in case something you did not expect falls through the cracks.
Notice also that the special rule for the internal.* hierarchy is first,
so it will catch even articles crossposted to alt.binaries.* or over 50\ \s-1KB\s0
in size.
.PP
As for poison wildmat expressions, if you have for instance an article
crossposted between misc.foo and misc.bar, the pattern:
.PP
.Vb 1
\&    misc.*,!misc.bar
.Ve
.PP
will match that article whereas the pattern:
.PP
.Vb 1
\&    misc.*,@misc.bar
.Ve
.PP
will not match that article.  An article posted only to misc.bar will fail
to match either pattern.
.PP
Usually, high-volume groups and groups whose articles do not need to be kept
around very long (binaries groups, *.jobs*, news.lists.filters, etc.) are
stored in \s-1CNFS\s0 buffers.  Use the other methods (or \s-1CNFS\s0 buffers again) for
everything else.  However, it is as often as not most convenient to keep in
\&\f(CW\*(C`tradspool\*(C'\fR special hierarchies like local hierarchies and hierarchies that
should never expire or through the spool of which you need to go manually.
.SH "HISTORY"
.IX Header "HISTORY"
Written by Katsuhiro Kondou <kondou@nec.co.jp> for InterNetNews.  Rewritten
into \s-1POD\s0 by Julien Elie.
.PP
\&\f(CW$Id:\fR storage.conf.pod 10230 2018\-01\-28 21:22:21Z iulius $
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIcycbuff.conf\fR\|(5), \fIexpire.ctl\fR\|(5), \fIexpireover\fR\|(8), \fIinn.conf\fR\|(5), \fIinnd\fR\|(8),
\&\fIuwildmat\fR\|(3).
