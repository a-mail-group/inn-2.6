.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "INCOMING.CONF 5"
.TH INCOMING.CONF 5 "2018-01-28" "INN 2.6.3" "InterNetNews Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
incoming.conf \- Configuration of incoming news feeds
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The file \fIpathetc\fR/incoming.conf consists of three types of entries:
key/value, peer and group.  Comments are from the hash character \f(CW\*(C`#\*(C'\fR to the
end of the line.  Blank lines are ignored.  All key/value entries within each
type must not be duplicated.  Key/value entries are a keyword immediately
followed by a colon, at least one blank and a value.  For example:
.PP
.Vb 1
\&    max\-connections: 10
.Ve
.PP
A legal key does not contains blanks, colons, nor \f(CW\*(C`#\*(C'\fR. There are three
different types of values:  integers, booleans, and strings.  Integers are
as to be expected.  A boolean value is either \f(CW\*(C`true\*(C'\fR or \f(CW\*(C`false\*(C'\fR
(case is significant).  A string value is any other sequence of characters.
If the string needs to contain whitespace, then it must be quoted
with double quotes.
.PP
Peer entries look like:
.PP
.Vb 3
\&    peer <name> {
\&        # body
\&    }
.Ve
.PP
The word \f(CW\*(C`peer\*(C'\fR is required.  <name> is a label for this peer.  It is any
string valid as a key.  The body of a peer entry contains some number of
key/value entries.
.PP
Group entries look like:
.PP
.Vb 3
\&    group <name> {
\&        # body
\&    }
.Ve
.PP
The word \f(CW\*(C`group\*(C'\fR is required.  <name> is any string valid as a key.  The body
of a group entry contains any number of the three types of entries.  So key/value
pairs can be defined inside a group, and peers can be nested inside a group,
and other groups can be nested inside a group.  Key/value entries that are
defined outside of all peer and group entries are said to be at global
scope.  Global key/value entries act as defaults for peers.  When \fBinnd\fR looks
for a specific value in a peer entry (for example, the maximum number of
connections to allow), if the value is not defined in the peer entry, then
the enclosing groups are examined for the entry (starting at the closest
enclosing group).  If there are no enclosing groups, or the enclosing groups
don't define the key/value, then the value at global scope is used.  A small
example could be:
.PP
.Vb 2
\&    # Global value applied to all peers that have no value of their own.
\&    max\-connections: 5
\&
\&    # A peer definition.
\&    peer uunet {
\&        hostname: usenet1.uu.net
\&    }
\&
\&    peer vixie {
\&        hostname: gw.home.vix.com
\&        max\-connections: 10        # Override global value.
\&    }
\&
\&    # A group of two peers which can open more connections than normal.
\&    group fast\-sites {
\&        max\-connections: 15
\&
\&        # Another peer.  The max\-connections: value from the
\&        # fast\-sites group scope is used.
\&        peer data.ramona.vix.com {
\&            hostname: data.ramona.vix.com
\&        }
\&
\&        peer bb.home.vix.com {
\&            hostname: bb.home.vix.com
\&            max\-connections: 20    # He can really cook.
\&       }
\&    }
.Ve
.PP
Given the above configuration file, the defined peers would have the
following values for the \fImax-connections\fR key.
.PP
.Vb 4
\&    uunet                  5
\&    vixie                 10
\&    data.ramona.vix.com   15
\&    bb.home.vix.com       20
.Ve
.SH "PARAMETERS"
.IX Header "PARAMETERS"
The following keys are allowed:
.IP "\fIcomment\fR" 4
.IX Item "comment"
This key requires a string value.  Reserved for future use.  The default
is an empty string.
.IP "\fIemail\fR" 4
.IX Item "email"
This key requires a string value.  Reserved for future use.  The default
is an empty string.
.IP "\fIhold-time\fR" 4
.IX Item "hold-time"
This key requires a positive integer value.  It defines the hold time
before closing, if the connection is over \fImax-connections\fR.  A value
of zero specifies immediate close.  The default is \f(CW0\fR.
.IP "\fIhostname\fR" 4
.IX Item "hostname"
This key requires a string value.  It is a list of hostnames separated
by a comma.  A hostname is either a fully qualified domain name that
resolves to the IPv4 or IPv6 address of the peer, or the dotted-quad
\&\s-1IP\s0 address of the peer for IPv4, or the colon-separated \s-1IP\s0 address
of the peer for IPv6.  If this key is not present in a peer block,
the hostname defaults to the label of the peer.
.IP "\fIidentd\fR" 4
.IX Item "identd"
This key requires a string value.  It is used if you wish to require
a peer's user name retrieved through \fBidentd\fR match the specified string.
Note that currently \fBinnd\fR does not implement any timeout in \fBidentd\fR
callbacks, so enabling this option may cause \fBinnd\fR to hang if the remote
peer does not respond to \fBident\fR callbacks in a reasonable timeframe.
The default is an empty string, that is to say no \fBidentd\fR.
.IP "\fIignore\fR" 4
.IX Item "ignore"
This key requires a boolean value.  Setting this entry causes \fBinnd\fR to
refuse every article sent via \s-1CHECK\s0 or \s-1IHAVE\s0 by this peer.  The default
is false.
.IP "\fImax-connections\fR" 4
.IX Item "max-connections"
This key requires a positive integer value.  It defines the maximum
number of connections allowed.  A value of zero specifies an unlimited
number of maximum connections (\f(CW\*(C`unlimited\*(C'\fR or \f(CW\*(C`none\*(C'\fR can be used
as synonyms).  The default is \f(CW0\fR.
.IP "\fInolist\fR" 4
.IX Item "nolist"
This key requires a boolean value.  It defines whether a peer is
allowed to issue list command.  The default is false, that is to say
it can.
.IP "\fInoresendid\fR" 4
.IX Item "noresendid"
This key requires a boolean value.  It defines whether \fBinnd\fR should
send \f(CW438\fR (response to \s-1CHECK,\s0 in streaming mode) or \f(CW435\fR (response
to \s-1IHAVE\s0 in non-streaming mode) responses instead of \f(CW431\fR (response
to \s-1CHECK\s0) or \f(CW436\fR (response to \s-1IHAVE\s0) if a message is offered that
is already received from another peer.  The deferral feature can be
useful for peers that resend messages right away, as \fBinnfeed\fR does.
The default is false:  the deferral feature is used so that the peer
receives \f(CW431\fR and \f(CW436\fR codes, and therefore resends the article
later.
.IP "\fIpassword\fR" 4
.IX Item "password"
This key requires a string value.  It is used if you wish to require
a peer to supply a password via \s-1AUTHINFO USER/PASS. \s0 The default is
an empty string, that it to say no password.
.IP "\fIpatterns\fR" 4
.IX Item "patterns"
This key requires a string value.  It is a list of \fInewsfeeds\fR\|(5)\-style
list of newsgroups which are to be accepted from this host.  The default
is the string \f(CW\*(C`*\*(C'\fR, that is to say all groups are accepted.
.IP "\fIskip\fR" 4
.IX Item "skip"
This key requires a boolean value.  Setting this entry causes this
peer to be skipped.  The default is false.
.IP "\fIstreaming\fR" 4
.IX Item "streaming"
This key requires a boolean value.  It defines whether streaming commands
(\s-1CHECK\s0 and \s-1TAKETHIS\s0) are allowed from this peer.  The default is true.
.SH "HISTORY"
.IX Header "HISTORY"
Written by Fabien Tassin <fta@sofaraway.org> for InterNetNews.  Converted to
\&\s-1POD\s0 by Julien Elie.
.PP
\&\f(CW$Id:\fR incoming.conf.pod 10179 2017\-09\-18 20:13:48Z iulius $
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIinn.conf\fR\|(5), \fIinnd\fR\|(8), \fInewsfeeds\fR\|(5), \fIuwildmat\fR\|(3).
