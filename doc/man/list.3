.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "list 3"
.TH list 3 "2015-09-12" "INN 2.6.3" "InterNetNews Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
list \- list routines
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    #include <inn/list.h>
\&
\&    struct node {
\&        struct node *succ;
\&        struct node *pred;
\&    };
\&
\&    struct list {
\&        struct node *head;
\&        struct node *tail;
\&        struct node *tailpred;
\&    };
\&
\&    void list_new(struct list *list);
\&
\&    struct node *list_addhead(struct list *list, struct node *node);
\&
\&    struct node *list_addtail(struct list *list, struct node *node);
\&
\&    struct node *list_head(struct list *list);
\&
\&    struct node *list_tail(struct list *list);
\&
\&    struct node *list_succ(struct node *node);
\&
\&    struct node *list_pred(struct node *node);
\&
\&    struct node *list_remhead(struct list *list);
\&
\&    struct node *list_remtail(struct list *list);
\&
\&    struct node *list_remove(struct node *node);
\&
\&    struct node *list_insert(struct list *list, struct node *node, struct node *pred);
\&
\&    bool list_isempty(struct list *list);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBlist_new\fR initialises the list header \fIlist\fR so as to create an
empty list.
.PP
\&\fBlist_addhead\fR adds \fInode\fR to the head of \fIlist\fR, returning the node
just added.
.PP
\&\fBlist_addtail\fR adds \fInode\fR to the tail of \fIlist\fR, returning the node
just added.
.PP
\&\fBlist_head\fR returns a pointer to the the node at the head of \fIlist\fR
or \fB\s-1NULL\s0\fR if the list is empty.
.PP
\&\fBlist_tail\fR returns a pointer to the the node at the tail of \fIlist\fR
or \fB\s-1NULL\s0\fR if the list is empty.
.PP
\&\fBlist_succ\fR returns the next (successor) node on the list after
\&\fInode\fR or \fB\s-1NULL\s0\fR if \fInode\fR was the final node.
.PP
\&\fBlist_pred\fR returns the previous (predecessor) node on the list before
\&\fInode\fR or \fB\s-1NULL\s0\fR if \fInode\fR was the first node.
.PP
\&\fBlist_remhead\fR removes the first node from \fIlist\fR and returns it to
the caller. If the list is empty \fB\s-1NULL\s0\fR is returned.
.PP
\&\fBlist_remtail\fR removes the last node from \fIlist\fR and returns it to
the caller. If the list is empty \fB\s-1NULL\s0\fR is returned.
.PP
\&\fBlist_remove\fR removes \fInode\fR from the list it is on and returns it
to the caller.
.PP
\&\fBlist_insert\fR inserts \fInode\fR onto \fIlist\fR after the node \fIpred\fR. If
\&\fIpred\fR is \fB\s-1NULL\s0\fR then \fInode\fR is added to the head of \fIlist\fR.
.SH "HISTORY"
.IX Header "HISTORY"
Written by Alex Kiernan <alex.kiernan@thus.net> for InterNetNews\ 2.4.0.
.PP
\&\f(CW$Id:\fR list.pod 9073 2010\-05\-31 19:00:23Z iulius $
