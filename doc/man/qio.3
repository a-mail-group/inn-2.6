.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "qio 3"
.TH qio 3 "2015-09-12" "INN 2.6.3" "InterNetNews Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
qio \- Quick I/O routines for reading files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    #include <inn/qio.h>
\&
\&    QIOSTATE *QIOopen(const char *name);
\&
\&    QIOSTATE *QIOfdopen(int> I<fd);
\&
\&    void QIOclose(QIOSTATE *qp);
\&
\&    char *QIOread(QIOSTATE *qp);
\&
\&    int QIOfileno(QIOSTATE *qp);
\&
\&    size_t QIOlength(QIOSTATE *qp);
\&
\&    int QIOrewind(QIOSTATE *qp);
\&
\&    off_t QIOtell(QIOSTATE *qp);
\&
\&    bool QIOerror(QIOSTATE *qp);
\&
\&    bool QIOtoolong(QIOSTATE *qp);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The routines described in this manual page are part of \fIlibinn\fR\|(3).  They
are used to provide quick read access to files; the \s-1QIO\s0 routines use
buffering adapted to the block size of the device, similar to stdio, but
with a more convenient syntax for reading newline-terminated lines.  \s-1QIO\s0
is short for \*(L"Quick I/O\*(R" (a bit of a misnomer, as \s-1QIO\s0 provides read-only
access to files only).
.PP
The \s-1QIOSTATE\s0 structure returned by \fBQIOopen\fR and \fBQIOfdopen\fR is the
analog to stdio's \s-1FILE\s0 structure and should be treated as a black box by
all users of these routines.  Only the above \s-1API\s0 should be used.
.PP
\&\fBQIOopen\fR opens the given file for reading.  For regular files, if your
system provides that information and the size is reasonable, \s-1QIO\s0 will use
the block size of the underlying file system as its buffer size;
otherwise, it will default to a buffer of 8\ \s-1KB. \s0 Returns a pointer to use
for subsequent calls, or \s-1NULL\s0 on error.  \fBQIOfdopen\fR performs the same
operation except on an already-open file descriptor (\fIfd\fR must designate
a file open for reading).
.PP
\&\fBQIOclose\fR closes the open file and releases any resources used by the
\&\s-1QIOSTATE\s0 structure.  The \s-1QIOSTATE\s0 pointer should not be used again after
it has been passed to this function.
.PP
\&\fBQIOread\fR reads the next newline-terminated line in the file and returns
a pointer to it, with the trailing newline replaced by nul.  The returned
pointer is a pointer into a buffer in the \s-1QIOSTATE\s0 object and therefore
will remain valid until \fBQIOclose\fR is called on that object.  If \s-1EOF\s0 is
reached, an error occurs, or if the line is longer than the buffer size,
\&\s-1NULL\s0 is returned instead.  To distinguish between the error cases, use
\&\fBQIOerror\fR and \fBQIOtoolong\fR.
.PP
\&\fBQIOfileno\fR returns the descriptor of the open file.
.PP
\&\fBQIOlength\fR returns the length in bytes of the last line returned by
\&\fBQIOread\fR.  Its return value is only defined after a successful call to
\&\fBQIOread\fR.
.PP
\&\fBQIOrewind\fR sets the read pointer back to the beginning of the file and
reads the first block of the file in anticipation of future reads.  It
returns 0 if successful and \-1 on error.
.PP
\&\fBQIOtell\fR returns the current value of the read pointer (the \fIlseek\fR\|(2)
offset at which the next line will start).
.PP
\&\fBQIOerror\fR returns true if there was an error in the last call to
\&\fBQIOread\fR, false otherwise.  \fBQIOtoolong\fR returns true if there was an
error and the error was that the line was too long.  If \fBQIOread\fR returns
\&\s-1NULL,\s0 these functions should be called to determine what happened.  If
\&\fBQIOread\fR returned \s-1NULL\s0 and \fBQIOerror\fR is false, \s-1EOF\s0 was reached.  Note
that if \fBQIOtoolong\fR returns true, the next call to \fBQIOread\fR will try
to read the remainder of the line and will likely return a partial line;
users of this library should in general treat long lines as fatal errors.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
This block of code opens \fI/etc/motd\fR and reads it a line at a time,
printing out each line preceded by its offset in the file.
.PP
.Vb 3
\&    QIOSTATE *qp;
\&    off_t offset;
\&    char *p;
\&
\&    qp = QIOopen("/etc/motd");
\&    if (qp == NULL) {
\&        perror("Open error");
\&        exit(1);
\&    }
\&    for (p = QIOread(qp); p != NULL; p = QIOread(qp))
\&        printf("%ld: %s\en", (unsigned long) QIOtell(qp), p);
\&    if (QIOerror(qp)) {
\&        perror("Read error");
\&        exit(1);
\&    }
\&    QIOclose(qp);
.Ve
.SH "HISTORY"
.IX Header "HISTORY"
Written by Rich \f(CW$alz\fR <rsalz@uunet.uu.net> for InterNetNews.  Updated by
Russ Allbery <eagle@eyrie.org>.
.PP
\&\f(CW$Id:\fR qio.pod 9767 2014\-12\-07 21:13:43Z iulius $
