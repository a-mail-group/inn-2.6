.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "INN::Config 3pm"
.TH INN::Config 3pm "2018-05-14" "INN 2.6.3" "InterNetNews Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
INN::Config \- Export all the variables an INN Perl script might need
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This Perl module sets up any and all the variables that an \s-1INN\s0 Perl script
might need.  More particularly, it allows using \fIinn.conf\fR variables:
they are all provided by \fBinnconfval\fR, as well as the version of \s-1INN
\&\s0(in the variable \f(CW$INN::Config::VERSION\fR for its short number form, on in
\&\f(CW$INN::Config::version\fR for its complete form).  Other useful variables
are also provided (directories, files, programs, masks, parameters).
The complete list can be obtained with the following script that prints
them out:
.PP
.Vb 3
\&    use lib \*(Aq<pathnews>/lib/perl\*(Aq;
\&    use INN::Config;
\&    use Data::Dumper;
\&
\&    my ($varname, $value);
\&    foreach my $var (@INN::Config::EXPORT_OK) {
\&        if ($var =~ /^\e$(.*)$/) {
\&            $varname = "INN::Config::$1";
\&            $value = Dumper($$varname);
\&            $value =~ s/^\e$VAR1 = //;
\&            print "\e$$varname = $value";
\&        } elsif ($var =~ /^\e@(.*)$/) {
\&            $varname = "INN::Config::$1";
\&            $value = Dumper(\e@$varname);
\&            $value =~ s/^\e$VAR1 = //;
\&            print "\e@$varname = $value";
\&        }
\&    }
.Ve
.PP
A local Perl script named \fIinnshellvars.pl.local\fR in \fIpathetc\fR will be
loaded, if present and executable, at the end of the run of this module.
A typical use is to add or override variables.
.PP
You only have to declare the module at the beginning of them:
.PP
.Vb 2
\&    use lib \*(Aq<pathnews>/lib/perl\*(Aq;
\&    use INN::Config;
.Ve
.PP
Then, you can for instance use:
.PP
.Vb 1
\&    print $INN::Config::localmaxartsize;
.Ve
.PP
to print the value of \fIlocalmaxartsize\fR as it is set in \fIinn.conf\fR.
.PP
You can also specify a version when you import the module.  If
you write:
.PP
.Vb 1
\&    use INN::Config 2.5.0;
.Ve
.PP
only versions of \s-1INN\s0 superior to 2.5.0 will be able to run the Perl
script.
.PP
It is also possible to import the variables directly in your namespace
if you specify what you want to import:
.PP
.Vb 1
\&    use INN::Config qw($localmaxartsize $pathbin);
.Ve
.PP
Note that a legacy \fIinnshellvars.pl\fR is also provided in \fIpathnews\fR/lib
for compatibility reasons with old Perl scripts not shipped with \s-1INN.\s0
It was used by versions of \s-1INN\s0 anterior to 2.5.0.  The corresponding
scripts for Shell and Tcl are, however, still in use:  \fIinnshellvars\fR
and \fIinnshellvars.tcl\fR.  They offer the same capabilities as this
module.
.SH "HISTORY"
.IX Header "HISTORY"
\&\fIinnshellvars.pl\fR was written by James Brister <brister@vix.com>
for InterNetNews in 1996.  It was converted to the INN::Config Perl
module by Julien Elie in 2007.
.PP
\&\f(CW$Id:\fR Config.pm.in 10283 2018\-05\-14 12:43:05Z iulius $
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIinn.conf\fR\|(5), \fIinnconfval\fR\|(1), \fIperl\fR\|(1).
